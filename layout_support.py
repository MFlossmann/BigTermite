#! /usr/bin/env python3
#
# Support module generated by PAGE version 4.10
# In conjunction with Tcl version 8.6
#    Jan 29, 2018 06:38:30 PM


import sys


from tkinter import *

#try:
#    import ttk
#    py3 = 0
#except ImportError:
import tkinter.ttk as ttk

from tkinter import filedialog
#    py3 = 1

from termiteTracker import termiteTracker

def set_Tk_var():
    global export_checker, decimal_comma, timer_display, last_action_display
    export_checker = BooleanVar()
    decimal_comma = BooleanVar()
    timer_display = StringVar()
    last_action_display = StringVar()
    export_checker.set(True)
    decimal_comma.set(True)
    last_action_display.set("Laufen")

def lambd(narf):
    """General function called when clicking anywhere"""
    # print('layout_support.lambd: {}'.format(narf))
    # sys.stdout.flush()
    # pass

def start_pause_tracker():
    global running
    print('layout_support.start_tracker')
    sys.stdout.flush()

    # Change to play/pause
    if not tt.started:
        print("Starting tracker with action '{}'".format(current_action))
        tt.start(current_action)
        w.StartButton.configure(text='''Pause''')

    elif tt.paused:
        print("Unpausing tracker")
        tt.start_or_pause()
        w.StartButton.configure(text='''Pause''')

    else:
        print("Pausing tracker")
        tt.pause()
        w.StartButton.configure(text='''Start''')

    # enable the stop button
    w.StopButton.configure(state='enabled')

    # enable the timer
    root.after(100, update_clock)


def stop_tracker():
    global running
    print('layout_support.stop_tracker')
    sys.stdout.flush()

    if not tt.started:
        return

    if export_checker.get():
        print("Exporting...")
        export_data()

    tt.stop()

    w.StopButton.configure(state='disabled')
    w.StartButton.configure(text='''Start''')


def export_data():
    # early return: nothing to export
    if len(tt.actions) == 0:
        return

    if not tt.paused:
        tt.pause()
        already_paused = True
    else:
        already_paused = False

    f = filedialog.asksaveasfile(mode='w', defaultextension=".csv")
    if f is None: # asksaveasfile return `None` if dialog closed with "cancel"
        print("Export aborted.")

        return

    export_str = tt.get_export_lst()
    if (decimal_comma):
        export_str = export_str.replace(".", ",")
    f.write(export_str)
    f.close()

    if not already_paused:
        tt.unpause()


def record_action(action, one_time_only = False):
    print('recording action {} at time {}'.format(action, tt.get_time()))
    if tt.started:
        tt.record_action(action, one_time_only)

    if not one_time_only:
        current_action = action
        last_action_display.set(action)

def init_clock():
    timer_display.set("00:00.00")

def update_clock():
    if tt.started:
        t = tt.get_time()
        minutes = int(t / 60)
        seconds = int(t % 60)
        frac = int(100*(t % 1))

        timer_str = "{:02d}:{:02d}.{:02d}".format(minutes, seconds, frac)
        timer_display.set(timer_str)

        root.after(100, update_clock)


def init(top, gui, *args, **kwargs):
    print('Initialized support')
    global w, top_level, root
    global tt, current_action, running
    w = gui
    top_level = top
    root = top
    tt = termiteTracker()
    current_action = "Laufen"  # TODO: better not hardcode this
    running = False
    init_clock()


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import layout
    layout.vp_start_gui()
